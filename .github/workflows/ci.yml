---
name: CI
on:
  schedule:
    # run every Sunday
    - cron: "0 12 * * 0"
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  test:
    name: Build
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.15.x
        os: [ubuntu-latest]
        may-fail: [false]
        include:
          - go-version: tip
            os: ubuntu-latest
            may-fail: true

    continue-on-error: ${{ matrix.may-fail }}
    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v
      GOPRIVATE: github.com/percona-platform

    steps:
      - name: Set up Go release
        if: matrix.go-version != 'tip'
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        uses: percona-platform/setup-go@v2.1.2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set up Go tip
        if: matrix.go-version == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "::set-env name=GOROOT::$HOME/gotip"
          echo "::add-path::$HOME/gotip/bin"

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2.3.2

      - name: Build Go code
        run: go build -v .

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (code generation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          go mod tidy
          git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status
